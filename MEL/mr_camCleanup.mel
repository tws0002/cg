/* CAMERA HACKING UI

    gets values for:
    - original tracked camera names.  guesses at their names and makes dropdowns for backup selection.
    - shot number.  guesses at this too, based on workspace.
    - frame range.  pulls values from time slider.
    - image plane paths.  browse or copy & paste.
    
    executes:
    - cameraHax(0): "bake and make"
    - cameraHax(1): "left image plane"
    - cameraHax(2): "right image plane"
    - cameraHax(3): "delete image planes generated by this script"
    
*/

// initial tracked cameras -- guess at tracked cameras in scene
string $camShapes[] = `ls -type "camera"`;
string $cams[]; clear $cams;
string $camL, $camR, $camS;
for($cs in $camShapes)
{
    string $parent[] =`listRelatives -p $cs`;
    $cams[size($cams)] = $parent[0];
	if(gmatch($parent[0], "*_L_*") || gmatch($parent[0], "*_Left_*"))
	    $camL = $parent[0];
		    
	if(gmatch($parent[0], "*_R_*") || gmatch($parent[0], "*_Right_*"))
		$camR = $parent[0];
}


// initial UI window
string $MyLabel = "camera hax";
if (`window -q -ex hax`)
    deleteUI hax;
window -mb 1 -t "FRISKIES CAMERA CLEANUP"
    -w 400
    -h 300
    -rtf 1 -tlb 1 -s 0
    -bgc 0.267 0.267 0.267
    hax;


// initial UI values
string $origPath = `workspace -q -act`;
string $tmpPath1 = substituteAllString($origPath, "N:/prod/friskiesalice_5311P/project/Sequences/FriskiesAlice/", "");
string $shotNum = match ("[0-9]+", $tmpPath1);
string $tmpPath2 = "";
int $minTime = `playbackOptions -q -minTime`;
int $maxTime = `playbackOptions -q -maxTime`;


// create UI layout
    
   // cameras
columnLayout -columnAttach "both" 3 -rowSpacing 3 -columnWidth 400;
text -fn "tinyBoldLabelFont" -bgc 0.2 0.2 0.2 "O R I G I N A L   T R A C K E D   C A M E R A S";

    rowColumnLayout -numberOfColumns 2;
        textFieldGrp -label "Left Track >>" -text $camL -cal 1 right -cw 1 80 -cw 2 100 -h 30 haxTextLCamera;
        popupMenu;
        for($c in $cams)
        menuItem -l $c -c ("textFieldGrp -e -tx "+$c+" haxTextLCamera");                          
        textFieldGrp -label "Right Track >>" -text $camR -cal 1 right -cw 1 80 -cw 2 100 -h 30 haxTextRCamera;
        popupMenu;
        for($c in $cams)
        menuItem -l $c -c ("textFieldGrp -e -tx "+$c+" haxTextRCamera" )  ;         
    setParent ..;

    // framge range, shot number

separator -height 20 -style "in";
text -fn "tinyBoldLabelFont" -bgc 0.2 0.2 0.2 "C G   F R A M E   R A N G E   &   S H O T   N U M B E R";
   
    rowColumnLayout -numberOfColumns 3;
        intFieldGrp -l "S >>" -cw 1 50 -cw 2 50 -v1 $minTime haxStartFrame;
        intFieldGrp -l "E >>" -cw 1 60 -cw 2 50 -v1 $maxTime haxEndFrame;
        textFieldGrp -l "Shot # >>" -text $shotNum -cal 1 right -cw 1 60 -cw 2 60 -h 30 haxTextShotNumber;
    setParent ..;
        
separator -height 5 -style "none";
button -l "B A K E   A N D   M A K E" -bgc 0.52 0.00 0.00 -h 40 -c "cameraHax(0)";

    // image plane utilities

separator -height 20 -style "in";
text -fn "tinyBoldLabelFont" -bgc 0.2 0.2 0.2 "I M A G E   P L A N E S";
    
    separator -height 5 -style "none";
    
    rowColumnLayout -numberOfColumns 1;
        button -l "CLEAR IMAGE PLANES" -bgc 0.4 0.4 0.4 -w 400 -h 30 -c "cameraHax(3)";
    setParent ..;
    
    rowColumnLayout -numberOfColumns 2;
        button -l ">>" -w 30 -h 5 -c "fileBrowseL($shotNum)";
        textFieldGrp -l "L" -text $tmpPath2 -cal 1 right -cw 1 10 -cw 2 350 -h 30 haxTextLPlanePath;
    setParent ..;
    
    rowColumnLayout -numberOfColumns 2;
        button -l ">>" -w 30 -h 5 -c "fileBrowseR($shotNum)";
        textFieldGrp -l "R" -text $tmpPath2 -cal 1 right -cw 1 10 -cw 2 350 -h 30 haxTextRPlanePath;
    setParent ..;
    
    rowColumnLayout -numberOfColumns 2;
        button -l "LEFT IMAGE PLANE" -bgc 0.64 0.22 0.22 -w 200 -h 40 -c "cameraHax(1)";
        button -l "RIGHT IMAGE PLANE" -bgc 0.00 0.52 0.65 -w 200 -h 40 -c "cameraHax(2)";
    setParent ..;

window -e -h 330 -w 400  hax;

showWindow hax;

/* END OF UI */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* CAMERA HACKING PROCEDURE
    
    input 0 "bake & make":
    - copies tracked cameras and rebakes them cleanly without scaling and whatnot -- BASED ON FRAME RANGE INPUT SO CHECK YOUR SHIT FIRST
    - sets values on cameras (foc. length, film back, etc) based on tracked cameras and several constants from the shoot
    - creates a center camera locator based on average tracked camera position
    - parents a maya stereo rig to that locator
    - names everything nicely based on the shot number input
    
    input 1 "left image plane":
    - creates a left eye image plane (just one) and connects it to selected cameras
    
    input 2 "right image plane":
    - creates a right eye image plane (just one) and connects it to selected cameras
    
    input 3 "clear image planes":
    - deletes all image planes generated by this script.
    
*/


global proc cameraHax(int $pick)
{
    
// MAIN VARIABLES -- shot number, frame range, camera names
string $shot = ("sh" + `textFieldGrp -q -tx haxTextShotNumber`);
int $rangeS = `intFieldGrp -q -v1 haxStartFrame`;
int $rangeE = `intFieldGrp -q -v1 haxEndFrame`;
string $range = ($rangeS + ":" + $rangeE);
string $L_oldTrkCam = `textFieldGrp -q -tx haxTextLCamera`;
string $R_oldTrkCam = `textFieldGrp -q -tx haxTextRCamera`;
string $L_newTrkCam = ($shot + "_L_clean_trk");
string $R_newTrkCam = ($shot + "_R_clean_trk");
string $anaglyphCam = ($shot + "_anaglyph");
float $filmGateH = 0.935;
float $filmGateV = 0.526;


//////////////// BAKE & MAKE SECTION //////////////////
    if ($pick == 0)
    {
            
        // create 2 new cameras and name them
        createNode "camera" -n ($L_newTrkCam + "Shape");
        createNode "camera" -n ($R_newTrkCam + "Shape");


        // transfer camera attributes from old to new, store average focal length for preview cam
        float $fLengthL = `getAttr ($L_oldTrkCam + ".focalLength")`;
        float $fLengthR = `getAttr ($R_oldTrkCam + ".focalLength")`;
        float $fLengthAvg = ($fLengthL + $fLengthR)/2;
        setAttr ($L_newTrkCam + ".focalLength") $fLengthL;
        setAttr ($R_newTrkCam + ".focalLength") $fLengthR;
        setAttr ($R_newTrkCam + ".cameraAperture") $filmGateH $filmGateV;
        setAttr ($L_newTrkCam + ".cameraAperture") $filmGateH $filmGateV;

            // constrain new cameras to old cameras
        parentConstraint $L_oldTrkCam $L_newTrkCam;
        parentConstraint $R_oldTrkCam $R_newTrkCam;
                // bake that sniz
        bakeResults -t $range $L_newTrkCam; 
        bakeResults -t $range $R_newTrkCam;
                    // delete parent constraints
        delete ($L_newTrkCam + "_parentConstraint1");
        delete ($R_newTrkCam + "_parentConstraint1");
                        // put new baked cameras in a group, set pivot
        group -n ($shot + "_trk_offset") $L_newTrkCam $R_newTrkCam;


        // create a center locator
        createNode locator -n "centerLocShape";
            // parent constrain locator to both cameras
        parentConstraint -w .5 $L_newTrkCam $R_newTrkCam centerLoc;
        parent centerLoc ($shot + "_trk_offset");


        // create stereo camera rig
        python("stereoCameraRig.createStereoCameraRig(rigName='StereoCamera')");
            // PC stereo camera rig to centerLoc
        parentConstraint centerLoc stereoCamera;


        // get IAD from tracked cameras via distanceBetween node, connect distanceBetween result to anaglyph camera IAD
        if (`objExists "trkCam_IAD"`)
            delete trkCam_IAD;
        
        createNode distanceBetween -n "trkCam_IAD";
        connectAttr ($L_newTrkCam + ".translate") trkCam_IAD.point1;
        connectAttr ($R_newTrkCam + ".translate") trkCam_IAD.point2;
        connectAttr trkCam_IAD.distance stereoCameraCenterCamShape.interaxialSeparation;

        // set focal length on anaglyph rig
        // set film back size on anaglyph rig (constant)
        // set stereo type to converged
        // turn on convergence plane display for manual adjustment
        setAttr stereoCameraCenterCamShape.focalLength $fLengthAvg;
        setAttr stereoCameraCenterCamShape.cameraAperture $filmGateH $filmGateV;
        setAttr stereoCameraCenterCamShape.stereo 1;
        setAttr stereoCameraCenterCamShape.zpp 1;

        // rename k thx bai
        rename stereoCamera $anaglyphCam;
    
    } 

////////////////// END OF BAKE & MAKE /////////////////////////
    
////////////////// LEFT IMAGE PLANE ///////////////////////////

    if ($pick == 1)
    {
        string $lPlane = "L_imagePlane";
        string $iPathL = `textFieldGrp -q -tx haxTextLPlanePath`;
        createNode imagePlane -n $lPlane;
        setAttr ($lPlane + ".useFrameExtension") 1;
        setAttr ($lPlane + ".displayOnlyIfCurrent") 1;
        setAttr ($lPlane + ".imageName") -type "string" $iPathL;
        connectAttr ($lPlane + ".message") ($L_newTrkCam + ".imagePlane");
        connectAttr ($lPlane + ".message") stereoCameraLeft.imagePlane;
        setAttr ($lPlane + ".sizeX") $filmGateH;
        setAttr ($lPlane + ".sizeY") $filmGateV;
    }
    
////////////////// RIGHT IMAGE PLANE ///////////////////////////

    if ($pick == 2)
    {
                string $rPlane = "R_imagePlane";
        string $iPathR = `textFieldGrp -q -tx haxTextRPlanePath`;
        createNode imagePlane -n $rPlane;
        setAttr ($rPlane + ".useFrameExtension") 1;
        setAttr ($rPlane + ".displayOnlyIfCurrent") 1;
        setAttr ($rPlane + ".imageName") -type "string" $iPathR;
        connectAttr ($rPlane + ".message") ($R_newTrkCam + ".imagePlane");
        connectAttr ($rPlane + ".message") stereoCameraRight.imagePlane;
        setAttr ($rPlane + ".sizeX") $filmGateH;
        setAttr ($rPlane + ".sizeY") $filmGateV;
    }
    
////////////////// DELETE IMAGE PLANES ///////////////////////////

    if ($pick == 3)
    {
        delete L_imagePlane;
        delete R_imagePlane;
        // delete anaglyph left
        // delete anaglyph right
    }

    
}////////////////// END OF cameraHax() ///////////////////////////

/////////////////// FILE BROWSER FOR IMAGE PLANES ////////////////

global proc fileBrowseL(string $sn)
{
    textFieldGrp -edit -text `fileDialog2 -fm 1 -dialogStyle 2 -cap "Find yo image plane son" -dir ("O:/prod/friskiesalice_5311P/project/Sequences/FriskiesAlice/sh_" + $sn + "/footage/Left/")` haxTextLPlanePath;
}

global proc fileBrowseR(string $sn)
{
    textFieldGrp -edit -text `fileDialog2 -fm 1 -dialogStyle 2 -cap "Find yo image plane son" -dir ("O:/prod/friskiesalice_5311P/project/Sequences/FriskiesAlice/sh_" + $sn + "/footage/Right/")` haxTextRPlanePath;
}

////////////////// END OF fileBrowseL & R() //////////////////////